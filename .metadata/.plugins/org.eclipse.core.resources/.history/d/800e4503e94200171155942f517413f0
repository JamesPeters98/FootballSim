package com.james;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class League {
	
	private List<Team> teams;
	private HashMap<Team,LeagueStats> leagueStats;
	
	public League(){
		teams = new LinkedList<Team>();
		leagueStats = new HashMap<Team,LeagueStats>();
		addTeam(Teams.CHELSEA);
		addTeam(Teams.LIVERPOOL);
		addTeam(Teams.MAN_CITY);
		addTeam(Teams.TOTTENHAM);
		addTeam(Teams.ARSENAL);
		addTeam(Teams.MAN_UNITED);
		addTeam(Teams.EVERTON);
		addTeam(Teams.SOUTHAMPTON);
		addTeam(Teams.CRYS_PALACE);
		addTeam(Teams.BOURNEMOUTH);
	}
	
	private void addTeam(Team team){
		teams.add(team);
		leagueStats.put(team, new LeagueStats());
	}
	
	public List<Team> getTeams(){
		return teams;
	}
	
	public void addStat(MatchResult result){
		LeagueStats statsHome = leagueStats.get(result.getHomeTeam());
		if(statsHome.team == null) statsHome.team = result.getHomeTeam();
		statsHome.goals += result.getHomeGoals();
		statsHome.goalsConceeded += result.getAwayGoals();
		statsHome.points += result.getHomePoints();
		
		LeagueStats statsAway = leagueStats.get(result.getAwayTeam());
		if(statsAway.team == null) statsAway.team = result.getAwayTeam();
		statsAway.goals += result.getAwayGoals();
		statsAway.goalsConceeded += result.getHomeGoals();
		statsAway.points += result.getAwayPoints();
	}
	
	public void printTable(){
		System.out.format("%-25s%-15s%-15s%-15s\n", new String[]{"Team","Points","Goals","Goals Conceeded"});
		System.out.println("---------------------------------------------------------------");
		ArrayList<LeagueStats> leagueStatsArray = new ArrayList<LeagueStats>(leagueStats.values());
		sortArray(leagueStatsArray);
		for(LeagueStats stats : leagueStatsArray) {
		    System.out.format("%-25s%-15s%-15s%-15s\n", new String[]{stats.team.name,""+stats.points,""+stats.goals,""+stats.goalsConceeded});
		}
	}
	
	private void sortArray(ArrayList<LeagueStats> collection){
		Comparator<LeagueStats> comparator = new Comparator<LeagueStats>() {
		    @Override
		    public int compare(LeagueStats left, LeagueStats right) {
		        if(left.points > right.points) return -1;
		        else if(left.points < right.points) return 1;
		        else {
		        	if((left.goals-left.goalsConceeded)>(right.goals-right.goalsConceeded)) return -1;
		        	else if ((left.goals-left.goalsConceeded)>(right.goals-right.goalsConceeded)) return 1;
		        	else if ((left.goals-left.goalsConceeded)==(right.goals-right.goalsConceeded)){
		        		if(left.goals>right.goals) return -1;
		        		else return 1;
		        	}
		        }
				return 0;
		    }
		};

		Collections.sort(collection, comparator);
	}
	


}
